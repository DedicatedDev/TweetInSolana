# This is a basic workflow to help you get started with Actions

name: SolanaWork

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  formatting:
    docker:
      - image: glacialengineering/solana-build:0.21.0.1
    steps:
      - checkout
      - run:
          name: "Format rust code"
          command: "cargo fmt --all -- --check"
      - run:
          name: "Check rust code"
          command: "cargo clippy -- -D warnings --warn clippy::all"
  
  security-check:
    docker:
      - image: glacialengineering/solana-build:0.21.0.1
    steps:
      - checkout
      - run:
          name: "Cargo audit"
          command: "cargo audit"
  
  test:
    docker:
      - image: glacialengineering/solana-build:0.21.0.1
    steps:
      - checkout
      - run:
          name: "Unit tests"
          command: "cargo test --lib"
      - run:
          name: "Anchor tests"
          command: |
            solana-keygen new -s --no-bip39-passphrase
            npm install
            anchor test -- --features local-testing,test-id
      - store_artifacts:
          path: /root/project/.anchor/program-logs
          destination: program-logs

  # This workflow contains a single job called "build"
  build:
    docker:
      - image: glacialengineering/solana-build:0.21.0.1
    steps:
      - checkout
      - run:
          name: "Build program"
          command: "anchor build && rm ./target/deploy/*.json && cd ./target/deploy && sha256sum * > sha256.txt"
      - store_artifacts:
          path: /root/project/target/deploy
          destination: bpf-programs
      - store_artifacts:
          path: /root/project/target/idl
          destination: idls
      - store_artifacts:
          path: /root/project/target/types
          destination: types

workflows:
  dev-deploy:
    when:
      equal: [ dev-deploy, << pipeline.git.branch >> ]
    jobs:
      - build
      - approve-deploy-devnet:
          type: approval
          requires:
            - build
      - deploy-devnet:
          requires:
            - approve-deploy-devnet
  build-test:
    when:
      not:
        equal: [ dev-deploy, << pipeline.git.branch >> ]
    jobs:
      - formatting
      - security-check
      - test
      - build